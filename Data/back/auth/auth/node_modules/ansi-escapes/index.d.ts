/// <reference types="node"/>
import {LiteralUnion} from 'type-fest';

declare namespace ansiEscapes {
	interface ImageOptions {
		/**
		The width is given as a number followed by a unit, or the word `'auto'`.

		- `N`: N character cells.
		- `Npx`: N pixels.
		- `N%`: N percent of the session's width or height.
		- `auto`: The image's inherent size will be used to determine an appropriate dimension.
		*/
		readonly width?: LiteralUnion<'auto', number | string>;

		/**
		The height is given as a number followed by a unit, or the word `'auto'`.

		- `N`: N character cells.
		- `Npx`: N pixels.
		- `N%`: N percent of the session's width or height.
		- `auto`: The image's inherent size will be used to determine an appropriate dimension.
		*/
		readonly height?: LiteralUnion<'auto', number | string>;

		readonly preserveAspectRatio?: boolean;
	}

	interface AnnotationOptions {
		/**
		Nonzero number of columns to annotate.

		Default: The remainder of the line.
		*/
		readonly length?: number;

		/**
		Starting X coordinate.

		Must be used with `y` and `length`.

		Default: The cursor position
		*/
		readonly x?: number;

		/**
		Starting Y coordinate.

		Must be used with `x` and `length`.

		Default: Cursor position.
		*/
		readonly y?: number;

		/**
		Create a "hidden" annotation.

		Annotations created this way can be shown using the "Show Annotations" iTerm command.
		*/
		readonly isHidden?: boolean;
	}
}

declare const ansiEscapes: {
	/**
	Set the absolute position of the cursor. `x0` `y0` is the top left of the screen.
	*/
	cursorTo(x: number, y?: number): string;

	/**
	Set the position of the cursor relative to its current position.
	*/
	cursorMove(x: number, y?: number): string;

	/**
	Move cursor up a specific amount of rows.

	@param count - Count of rows to move up. Default is `1`.
	*/
	cursorUp(count?: number): string;

	/**
	Move cursor down a specific amount of rows.

	@param count - Count of rows to move down. Default is `1`.
	*/
	cursorDown(count?: number): string;

	/**
	Move cursor forward a sp