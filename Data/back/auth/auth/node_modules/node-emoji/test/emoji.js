/*jslint node: true*/
/*jslint expr: true*/
/*global describe, it*/
"use strict";

var should = require('should');
var emoji = require('../index');

describe("emoji.js", function () {
  describe("get(emoji)", function () {
    it("should return an emoji code when passed a string", function () {
      var coffee = emoji.get('coffee');
      should.exist(coffee);
      coffee.should.be.exactly('‚òï');
    });

    it("should return emoji code back when passed an emoji code", function () {
      var dancers = emoji.get('üëØ‚Äç‚ôÄÔ∏è');
      should.exist(dancers);
      dancers.should.be.exactly('üëØ‚Äç‚ôÄÔ∏è');
    })

    it("should support github flavored markdown emoji", function () {
      var coffee = emoji.get(':coffee:');
      should.exist(coffee);
      coffee.should.be.exactly('‚òï');
    });
  });

  describe("random()", function () {
    it("should return a random emoji and the corresponding key", function () {
      var result = emoji.random();
      should.exist(result);
      should.exist(result.key);
      should.exist(result.emoji);
      result.emoji.should.be.exactly(emoji.get(result.key));
    });
  });

  describe("which(emoji_code)", function () {
    it("should return name of the emoji", function () {
      var coffee = emoji.which('‚òï');
      should.exist(coffee);
      coffee.should.be.exactly('coffee');
    });

    it("should work for differently formed characters", function () {
      var umbrella = emoji.which('‚òî');
      should.exist(umbrella);
      umbrella.should.be.exactly('umbrella_with_rain_drops');
    });

    it("should return the same name for differently formed characters", function () {
      var umbrella1 = emoji.which('‚òî');
      should.exist(umbrella1);
      var umbrella2 = emoji.which('‚òîÔ∏è');
      should.exist(umbrella2);
      umbrella1.should.equal(umbrella2);
    });

    it("should work for flags", function() {
      var mexico = emoji.which('üá≤üáΩ');
      should.exists(mexico);
      mexico.should.be.exactly('flag-mx');

      var marocco = emoji.which('üá≤üá¶');
      should.exists(marocco);
      marocco.should.be.exactly('flag-ma');

      // see issue #21
      mexico.should.not.equal(marocco);
    });
  });

  describe("emojify(str)", function () {
    it("should parse :emoji: in a string and replace them with the right emoji", function () {
      var coffee = emoji.emojify('I :heart:  :coffee:! -  :hushed::star::heart_eyes:  ::: test : : :+1:+');
      should.exist(coffee);
      coffee.should.be.exactly('I ‚ù§Ô∏è  ‚òï! -  üòØ‚≠êüòç  ::: test : : üëç+');
    });

    it("should handle flags correctly", function() {
      var flags = emoji.emojify('Mexico :flag-mx: and Marocco :flag-ma: are not the same');
      should.exists(flags);
      flags.should.be.exactly('Mexico üá≤üáΩ and Marocco üá≤üá¶ are not the same');
    });

    it("should leave unknown emoji", function () {
      var coffee = emoji.emojify('I :unknown_emoji: :star: :another_one:');
      should.exist(coffee);
      coffee.should.be.exactly('I :unknown_emoji: ‚≠ê :another_one:');
    });

    it("should replace unknown emoji using provided cb function", function () {
      var coffee = emoji.emojify('I :unknown_emoji: :star: :another_one:', function(name) {
        return name;
      });
      should.exist(coffee);
      coffee.should.be.exactly('I unknown_emoji ‚≠ê another_one');
    });

    it("should wrap emoji using provided format function", function () {
      var coffee = emoji.emojify('I :heart: :coffee:', null, function(code, name) {
        return '<img alt="' + code + '" src="' + name + '.png" />';
      });

      should.exist(coffee);
      coffee.should.be.exactly('I <img alt="‚ù§Ô∏è" src="heart.png" /> <img alt="‚òï" src="coffee.png" />');
    });

    it("should not wrap unknown using provided format function", function () {
      var coffee = emoji.emojify('I :unknown_emoji: :coffee:', null, function(code, name) {
        return '<img alt="' + code + '" src="' + name + '.png" />';
      });

      should.exist(coffee);
      coffee.should.be.exactly('I :unknown_emoji: <img alt="‚òï" src="coffee.png" />');
    });

    it("should replace unknown emojis and wrap known emojis using cb functions", function () {
      var coffee = emoji.emojify('I :unknown_emoji: :coffee:',
        function(name) {
          return name;
        },
        function(code, name) {
          return '<img alt="' + code + '" src="' + name + '.png" />';
        }
      );

      should.exist(coffee);
      coffee.should.be.exactly('I unknown_emoji <img alt="‚òï" src="coffee.png" />');
  